import React, { useEffect, useState } from 'react';
import { Routes, Route, useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import './i18n/setup';

import Landing from './pages/Landing';
import Profile from './pages/Profile';
import Dashboard from './pages/Dashboard';
import useTokenRefresher from './hooks/useTokenRefresher';
import { SessionProvider, useSession } from './context/SessionContext';

// üëâ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å–µ—Å—Å–∏–∏
function AppRoutes() {
  const { i18n } = useTranslation();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const { setTokens, sessionLoaded, accessToken } = useSession();

  // üîÅ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ access/refresh —Ç–æ–∫–µ–Ω–æ–≤
  useTokenRefresher();

  // üì¶ Telegram initData
  useEffect(() => {
    const tg = window.Telegram?.WebApp;

    if (tg) {
      tg.ready();
      tg.expand?.();

      const initDataRaw = tg.initData;
      if (initDataRaw && initDataRaw.length > 10) {
        localStorage.setItem('initData', initDataRaw);
        console.log('üì¶ initData –æ–±–Ω–æ–≤–ª—ë–Ω –≤ localStorage');
      }

      const lang = tg.initDataUnsafe?.user?.language_code || 'en';
      i18n.changeLanguage(['ru', 'en', 'zh', 'es'].includes(lang) ? lang : 'en');
    }
  }, [i18n]);

  // ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  useEffect(() => {
    if (sessionLoaded && accessToken) {
      fetch('https://api.fitmine.vip/api/profile', {
        headers: {
          Authorization: `Bearer ${accessToken}`
        }
      })
        .then(res => res.json())
        .then(res => {
          if (res.ok && res.user) {
            localStorage.setItem('user', JSON.stringify(res.user));
            console.log('üîÅ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω –∏–∑ Supabase');
          }
        })
        .catch(err => {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', err.message);
        });
    }
  }, [sessionLoaded, accessToken]);

  // üöÄ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  const handleStart = async () => {
    const initDataRaw = localStorage.getItem('initData') || '';

    if (!initDataRaw || initDataRaw.length < 20) {
      alert('‚ùå –û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å—å Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
      return;
    }

    setLoading(true);
    try {
      const res = await fetch("https://api.fitmine.vip/api/verifyTelegram", {
        method: "POST",
        headers: {
          Authorization: `tma ${initDataRaw}`
        }
      });

      const data = await res.json();

      if (data.ok && data.access_token && data.refresh_token) {
        setTokens(data.access_token, data.refresh_token, data.user);
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Ç–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        navigate('/profile');
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}`);
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', err);
      alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setLoading(false);
    }
  };

  // ‚è≥ –ü–æ–∫–∞ —Å–µ—Å—Å–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
  if (!sessionLoaded) {
    return (
      <div className="flex items-center justify-center min-h-screen text-gray-400">
        –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏...
      </div>
    );
  }

  return (
    <Routes>
      <Route path="/" element={<Landing onStart={handleStart} loading={loading} />} />
      <Route path="/profile" element={<Profile />} />
      <Route path="/dashboard" element={<Dashboard />} />
    </Routes>
  );
}

// üéØ –°–µ—Å—Å–∏—è –æ–±—ë—Ä–Ω—É—Ç–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
export default function App() {
  return (
    <SessionProvider>
      <AppRoutes />
    </SessionProvider>
  );
}