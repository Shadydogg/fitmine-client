// /src/hooks/useDailyReward.ts ‚Äî v2.0.0 (–∞—É–¥–∏—Ç –ø–æ MASTER BLUEPRINT)
import { useState } from "react";
import { toast } from "react-toastify";
import { api } from "../api/apiClient";

export function useDailyReward() {
  const [reward, setReward] = useState<string | null>(null);
  const [alreadyClaimed, setAlreadyClaimed] = useState(false);
  const [doubleGoalActive, setDoubleGoalActive] = useState(false);
  const [goalNotReached, setGoalNotReached] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const claim = async (): Promise<{
    ok: boolean;
    rewardId?: string;
    error?: string;
  }> => {
    setLoading(true);
    setError(null);

    try {
      const res = await api.post("/ep/claim");
      const json = res.data;

      if (json.alreadyClaimed) {
        setAlreadyClaimed(true);
        toast.info("‚ö° PowerBank —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è");
        return { ok: false, error: "already_claimed" };
      }

      if (json.doubleGoalActive) {
        setDoubleGoalActive(true);
        toast.warning("‚ö° PowerBank —É–∂–µ –±—ã–ª –ø—Ä–∏–º–µ–Ω—ë–Ω —Å–µ–≥–æ–¥–Ω—è");
        return { ok: false, error: "double_goal_active" };
      }

      if (json.goalNotReached) {
        setGoalNotReached(true);
        toast.info(`‚õî –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`);
        return { ok: false, error: "goal_not_reached" };
      }

      if (json.ok && json.rewardId) {
        setReward(json.rewardId);
        setShowModal(true);
        setAlreadyClaimed(true);
        toast.success("üéÅ PowerBank –ø–æ–ª—É—á–µ–Ω!");
        return { ok: true, rewardId: json.rewardId };
      }

      toast.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å PowerBank");
      return { ok: false, error: json.error || "Unknown error" };
    } catch (err: any) {
      const msg = err.response?.data?.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã";
      toast.error(`‚ùå ${msg}`);
      setError(msg);
      return { ok: false, error: msg };
    } finally {
      setLoading(false);
    }
  };

  return {
    reward,
    alreadyClaimed,
    doubleGoalActive,
    goalNotReached,
    showModal,
    setShowModal,
    loading,
    error,
    claim,
  };
}
